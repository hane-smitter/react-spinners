@use "sass:string";
@use "sass:list";

@use "../../../scss/variables" as defaults;
@use "../../../scss/mixins" as sharedMixins;

$animationDuration: 0.5s;
$dotsWrapperWidth: 12.5em; // 200px
$dotsWrapperHeight: 3.75em; // 60px

// $dotSize: 1.25em; // 20px
$dotSize: 1.1em;
$dotSpacing: calc($dotSize * 0.5);
$shadowHeight: calc($dotSize / 5); // 4px

.bounce-rli-bounding-box {
	font-size: defaults.$fontSizer;
	display: inline-block;
	// padding bottom = height of shadow + offsetTop(calc. from applied style top 101%)
	padding-bottom: calc($shadowHeight + ($dotsWrapperHeight * 0.01));

	position: absolute;
	left: 50%;
	top: 50%;
	transform: translate(-50%, -50%);

	// background-color: crimson;
	// space(0.625em) -> dot(1.25em) -> space(0.625em) -> dot(1.25em) -> space(0.625em) -> dot(1.25em) -> space(0.625em) -----> 2.5 + 3.75

	.wrapper {
		--dot1-delay: #{0s};
		--dot1-x-offset: #{$dotSpacing};

		--dot2-delay: #{calc(($animationDuration + $animationDuration * 0.75) * -1)};
		--dot2-x-offset: #{calc($dotSpacing * 2 + $dotSize)};

		--dot3-delay: #{calc(($animationDuration + $animationDuration * 0.5) * -1)};
		--dot3-x-offset: #{calc($dotSpacing * 3 + $dotSize * 2)};

		// width: $dotsWrapperWidth;
		width: calc($dotSize * 3 + $dotSpacing * 4);
		height: $dotsWrapperHeight;
		position: relative;
		display: block;

		// Debugging
		background-color: dodgerblue;

		.group {
			display: block;
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;

			// display: flex;
			// justify-content: space-around;
			// align-items: center;

			.dot {
				width: $dotSize;
				height: $dotSize;
				position: absolute;
				border-radius: 50%;
				background-color: #fff;
				// left: 15%;
				// margin: 0 $dotSpacing;
				transform-origin: 50%;
				animation: circle $animationDuration alternate infinite cubic-bezier(0.74, 0.1, 0.74, 1);

				// Debugging
				background-color: darkorange;

				&:nth-of-type(1) {
					left: var(--dot1-x-offset);
					// left: 0;
					animation-delay: var(--dot1-delay);
				}
				&:nth-of-type(2) {
					left: var(--dot2-x-offset);
					animation-delay: var(--dot2-delay);
				}
				&:nth-of-type(3) {
					left: var(--dot3-x-offset);
					animation-delay: var(--dot3-delay);
				}
			}

			.shadow {
				width: $dotSize;
				height: $shadowHeight;
				border-radius: 50%;
				background-color: rgba(0, 0, 0, 0.5);
				position: absolute;
				top: 101%;
				transform-origin: 50%;
				z-index: -1;
				filter: blur(0.6px);
				animation: shadow $animationDuration alternate infinite cubic-bezier(0.74, 0.1, 0.74, 1); //ease-in-out

				&:nth-of-type(1) {
					left: var(--dot1-x-offset);
					animation-delay: var(--dot1-delay);
				}
				&:nth-of-type(2) {
					left: var(--dot2-x-offset);
					animation-delay: var(--dot2-delay);
				}
				&:nth-of-type(3) {
					left: var(--dot3-x-offset);
					animation-delay: var(--dot3-delay);
				}
			}
		}
	}
}

@keyframes circle {
	0% {
		top: 0%;
	}
	60% {
		height: 1.25em;
		border-radius: 50%;
		transform: scaleX(1);
	}
	100% {
		top: 100%;
		height: $shadowHeight;
		transform: scaleX(1.5);
	}
}

@keyframes shadow {
	0% {
		transform: scaleX(0.2);
		opacity: 0.2;
	}
	60% {
		// transform: scaleX(1);
		opacity: 0.6;
	}
	100% {
		transform: scaleX(1.5);
		opacity: 0.8;
	}
}
