@use "sass:string";
@use "sass:list";

@use "../../../scss/variables" as defaults;
@use "../../../scss/mixins" as sharedMixins;

$fallbackAnimationDuration: 1s; // This time value should be in sync with JS(React component)
$animationDuration: var(
	#{defaults.$animationDurationVarName},
	$fallbackAnimationDuration
);

$animationFn: var(#{defaults.$animationEasingVarName}, ease-out);
$brick-width: 1.4em;

$brickStackMove: string.unique-id();
$brickStackColoring: string.unique-id();

// Sass list with variable names that color the animation
// NOTE: These names should match with ones in Javascript(React component)
$coloringPropertyNames: (
	"--TD-brick-stack-phase1-color",
	"--TD-brick-stack-phase2-color",
	"--TD-brick-stack-phase3-color",
	"--TD-brick-stack-phase4-color"
);

@function TDBrickStackColorVar($phaseNum: null) {
	$varName: string.unquote(list.nth($coloringPropertyNames, 1));
	$cssVar: var($varName);

	@if ($phaseNum and $phaseNum != 1) {
		$newVarName: string.unquote(list.nth($coloringPropertyNames, $phaseNum));

		// Explicitly add fallback since @property support is still catching up
		$cssVar: var($newVarName, var($varName));
	}

	@return $cssVar;
}

@mixin dotShapes() {
	background:
		radial-gradient(
				circle closest-side,
				currentColor 0% 95%,
				rgba(0, 0, 0, 0) calc(95% + 1px)
			)
			0 0/ 40% 40% no-repeat,
		radial-gradient(
				circle closest-side,
				currentColor 0% 95%,
				rgba(0, 0, 0, 0) calc(95% + 1px)
			)
			0 100% / 40% 40% no-repeat,
		radial-gradient(
				circle closest-side,
				currentColor 0% 95%,
				rgba(0, 0, 0, 0) calc(95% + 1px)
			)
			100% 100% / 40% 40% no-repeat;
}

.brick-stack-rli-bounding-box {
	--TD-brick-stack-phase1-color: #{defaults.$defaultColor};

	box-sizing: border-box;
	font-size: defaults.$fontSizer;
	display: inline-block;
	color: TDBrickStackColorVar();

	.brick-stack-indicator {
		width: calc($brick-width * 2);
		height: calc($brick-width * 2);
		position: relative;
		display: block;
		margin: 0 auto;
	}

	.brick-stack {
		width: 100%;
		height: 100%;
		@include dotShapes();

		animation:
			$animationDuration $animationFn infinite $brickStackMove,
			calc($animationDuration * 4) $animationFn infinite $brickStackColoring;
	}
}

// Register coloring CSS properties
@include sharedMixins.registerCustomProperties($coloringPropertyNames) {
	syntax: "<color>";
	inherits: true;
	initial-value: #{defaults.$defaultColor};
}

$animationDurationName: (#{defaults.$animationDurationVarName});
// Register CSS custom property for variable with animation Duration
// NOTE: We wont register custom property for animation easing function since it has a syntax that is not yet supported by CSS @property
@include sharedMixins.registerCustomProperties($animationDurationName) {
	syntax: "<time>";
	inherits: true;
	initial-value: $fallbackAnimationDuration;
}

@keyframes #{$brickStackMove} {
	0% {
		background-position:
			0 0,
			0 100%,
			100% 100%;
	}
	25% {
		background-position:
			100% 0,
			0 100%,
			100% 100%;
	}
	50% {
		background-position:
			100% 0,
			0 0,
			100% 100%;
	}
	75% {
		background-position:
			100% 0,
			0 0,
			0 100%;
	}
	100% {
		background-position:
			100% 100%,
			0 0,
			0 100%;
	}
}

@keyframes #{$brickStackColoring} {
	100%,
	0% {
		color: TDBrickStackColorVar(1);
	}
	20% {
		color: TDBrickStackColorVar(1);
	}
	25% {
		color: TDBrickStackColorVar(2);
	}
	45% {
		color: TDBrickStackColorVar(2);
	}
	50% {
		color: TDBrickStackColorVar(3);
	}
	70% {
		color: TDBrickStackColorVar(3);
	}
	75% {
		color: TDBrickStackColorVar(4);
	}
	95% {
		color: TDBrickStackColorVar(4);
	}
}
