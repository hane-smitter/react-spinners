@use "sass:string";
@use "sass:list";

@use "../../../scss/variables" as defaults;
@use "../../../scss/mixins" as sharedMixins;

$fallbackAnimationDuration: 1s; // This time value should be in sync with JS(React component)
$animationDuration: var(
	#{defaults.$animationDurationVarName},
	$fallbackAnimationDuration
);

$animationFn: var(#{defaults.$animationEasingVarName}, linear);
$annulusTrackOpacity: 0.22;

$annulusTrackSpin: string.unique-id();
$annulusTrackColoring: string.unique-id();

// Sass list with variable names that color the animation
// NOTE: These names should match with ones in Javascript(React component)
$trackColoringNames: (
	"--OP-annulus-track-phase1-color",
	"--OP-annulus-track-phase2-color",
	"--OP-annulus-track-phase3-color",
	"--OP-annulus-track-phase4-color"
);
$sectorColoringNames: (
	"--OP-annulus-sector-phase1-color",
	"--OP-annulus-sector-phase2-color",
	"--OP-annulus-sector-phase3-color",
	"--OP-annulus-sector-phase4-color"
);

@function annulusRingColorVars($phaseNum: null, $applyTo: "sector") {
	$listNames: $sectorColoringNames;
	@if ($applyTo != "sector") {
		$listNames: $trackColoringNames;
	}

	$varName: string.unquote(list.nth($listNames, 1));
	$cssVar: var($varName);

	@if ($phaseNum and $phaseNum != 1) {
		$newVarName: string.unquote(list.nth($listNames, $phaseNum));

		// Explicitly add fallback since @property support is still catching up
		$cssVar: var($newVarName, var($varName));
	}

	@return $cssVar;
}

@mixin applyColor($num) {
	border-color: annulusRingColorVars($num, "track");
	border-top-color: annulusRingColorVars($num);
}

.OP-annulus-sector-track-rli-bounding-box {
	--OP-annulus-track-phase1-color: #{rgba(
			defaults.$defaultColor,
			$annulusTrackOpacity
		)}; // sass specific rgba
	--OP-annulus-sector-phase1-color: #{defaults.$defaultColor};

	font-size: defaults.$fontSizer;
	display: inline-block;

	.OP-annulus-sector-track-indicator {
		width: 5em;
		height: 5em;
		color: annulusRingColorVars();
		display: inline-block;

		// create stacking context
		position: relative;
		z-index: 0;

		.annulus-track-ring {
			width: 100%;
			height: 100%;
			border-width: 0.34em;
			border-style: solid;
			border-radius: 50%;
			box-sizing: border-box;
			@include applyColor(1);

			animation:
				$animationDuration $animationFn infinite $annulusTrackSpin,
				calc($animationDuration * 4) $animationFn infinite $annulusTrackColoring;
		}

		.OP-annulus-sector-text {
			mix-blend-mode: difference;
			// filter: invert(3%);

			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);

			z-index: -2;

			// background-color: blue;
		}
	}
}

// Register coloring CSS properties (for Track and Sector)
@include sharedMixins.registerCustomProperties($trackColoringNames) {
	syntax: "<color>";
	inherits: true;
	initial-value: #{rgba(defaults.$defaultColor, $annulusTrackOpacity)};
}
@include sharedMixins.registerCustomProperties($sectorColoringNames) {
	syntax: "<color>";
	inherits: true;
	initial-value: #{defaults.$defaultColor};
}

// Sass list
$animationDurationName: (#{defaults.$animationDurationVarName});
// Register CSS custom property for variable with animation Duration
// NOTE: We wont register custom property for animation easing function since it has a syntax that is not yet supported by CSS @property
@include sharedMixins.registerCustomProperties($animationDurationName) {
	syntax: "<time>";
	inherits: true;
	initial-value: $fallbackAnimationDuration;
}

@keyframes #{$annulusTrackSpin} {
	to {
		transform: rotate(1turn);
	}
}

@keyframes #{$annulusTrackColoring} {
	100%,
	0% {
		@include applyColor(1);
	}
	18% {
		@include applyColor(1);
	}
	25% {
		@include applyColor(2);
	}
	43% {
		@include applyColor(2);
	}
	50% {
		@include applyColor(3);
	}
	68% {
		@include applyColor(3);
	}
	75% {
		@include applyColor(4);
	}
	93% {
		@include applyColor(4);
	}
}
