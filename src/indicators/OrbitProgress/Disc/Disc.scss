@use "sass:string";
@use "sass:list";

@use "../../../scss/variables" as defaults;
@use "../../../scss/mixins" as sharedMixins;

$fallbackAnimationDuration: 1.5s; // This time value should be in sync with JS(React component)
$animationDuration: var(
	#{defaults.$animationDurationVarName},
	$fallbackAnimationDuration
);

$animationFn: var(#{defaults.$animationEasingVarName}, ease-in-out);

// Animation names
$annulusProgressRotate: string.unique-id();
$annulusShrinkStretch: string.unique-id();
$annuluscoloring: string.unique-id();

// Sass list with variable names that color the animation
// NOTE: These names should match with ones in Javascript(React component)
$coloringPropertyNames: (
	"--OP-annulus-phase1-color",
	"--OP-annulus-phase2-color",
	"--OP-annulus-phase3-color",
	"--OP-annulus-phase4-color"
);

@function annulusColorPhase($phaseNum: null) {
	$varName: string.unquote(list.nth($coloringPropertyNames, 1));
	$cssVar: var($varName);

	@if ($phaseNum and $phaseNum != 1) {
		$newVarName: string.unquote(list.nth($coloringPropertyNames, $phaseNum));

		// Explicitly add fallback since @property support is still catching up
		$cssVar: var($newVarName, var($varName));
	}

	@return $cssVar;
}

.OP-annulus-rli-bounding-box {
	--OP-annulus-phase1-color: #{defaults.$defaultColor};

	font-size: defaults.$fontSizer;
	display: inline-block;

	.OP-annulus-indicator {
		width: 5em;
		height: 5em;
		color: annulusColorPhase();
		display: inline-block;

		// create stacking context
		position: relative;
		z-index: 0;

		.whirl {
			animation: $annulusProgressRotate calc($animationDuration * 1.33) linear
				infinite;
			height: 100%;
			transform-origin: center center;
			width: 100%;
			position: absolute;
			top: 0;
			bottom: 0;
			left: 0;
			right: 0;
			margin: auto;
		}

		.path {
			stroke-dasharray: 1, 125;
			stroke-dashoffset: 0;
			animation:
				$animationDuration $animationFn infinite $annulusShrinkStretch,
				calc($animationDuration * 4) $animationFn infinite $annuluscoloring;
			stroke-linecap: round;
		}
	}

	.OP-annulus-text {
		mix-blend-mode: difference;
		// filter: invert(3%);

		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);

		z-index: -2;

		// background-color: blue;
	}
}

// Register coloring CSS properties
@include sharedMixins.registerCustomProperties($coloringPropertyNames) {
	syntax: "<color>";
	inherits: true;
	initial-value: #{defaults.$defaultColor};
}

// Sass list
$animationDurationName: (#{defaults.$animationDurationVarName});
// Register CSS custom property for variable with animation Duration
// NOTE: We wont register custom property for animation easing function since it has a syntax that is not yet supported by CSS @property
@include sharedMixins.registerCustomProperties($animationDurationName) {
	syntax: "<time>";
	inherits: true;
	initial-value: $fallbackAnimationDuration;
}

@keyframes #{$annulusProgressRotate} {
	100% {
		transform: rotate(360deg);
	}
}

@keyframes #{$annulusShrinkStretch} {
	0% {
		stroke-dasharray: 1, 125;
		stroke-dashoffset: 0;
	}
	50% {
		stroke-dasharray: 98, 125;
		stroke-dashoffset: -35px;
	}
	100% {
		stroke-dasharray: 98, 125;
		stroke-dashoffset: -124px;
	}
}

@keyframes #{$annuluscoloring} {
	100%,
	0% {
		stroke: annulusColorPhase(1);
	}
	22% {
		stroke: annulusColorPhase(1);
	}
	25% {
		stroke: annulusColorPhase(2);
	}
	42% {
		stroke: annulusColorPhase(2);
	}
	50% {
		stroke: annulusColorPhase(3);
	}
	72% {
		stroke: annulusColorPhase(3);
	}
	75% {
		stroke: annulusColorPhase(4);
	}
	97% {
		stroke: annulusColorPhase(4);
	}
}
